Maybe useful ?
https://www.reddit.com/r/asm/comments/sr3s6i/question_about_microsoft_x64_calling_convention/
https://learn.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions?view=msvc-170
https://developer.apple.com/documentation/apple-silicon/addressing-architectural-differences-in-your-macos-code
https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms#//apple_ref/doc/uid/TP40009020-SW1


================================================================================
07/02/2023

Modify the organization of the build folders to support several architectures:
- x86_64
- arm64


Add the binaries for MacOs ARM64 and Windows ARM64.
Did not modify anything for ARM64...
Seems to work, but i'm sure there are corner cases that will not work (like
float - was already not adapted when I added the support for 64-bit).

Tested under MacOs Monterey ARM64: gci-try.rex is ok.
Tested under Windows 11 ARM64: gci-try.rex is ok, and the colors are displayed
correctly in ooRexxShell (using the console API).

Still to fix: remove the dependency on ooRexx libraries.

================================================================================
2021 August 13

Added new makefiles to build with Builder
    Macos, Linux:
        cd src
        make -f GNUmakefile-builder configure   # (to clean the build and to create the rights symbolic links)
        make -f GNUmakefile-builder
    Windows:
        cd src
        nmake /f Makefile-builder.vc configure  & rem (to clean the build and to create the rights symbolic links)
        nmake /f Makefile-builder.vc

The binaries are generated in the folder build, the dynamic libraries are in github for these configurations:
    build/macos/clang/debug/64
    build/macos/clang/release/64
    build/ubuntu/gcc/debug/64
    build/ubuntu/gcc/release/64
    build/win/cl/debug/64
    build/win/cl/release/64


Added support for 64-bit.

Added support for type aliases.
Each alias defines a type and a size, no size accepted after these aliases.

- long (signed long)
- llong (signed long long)
- pointer (opaque, no dereferencement, unlike GCI_indirect)
- size_t (unsigned)
- ssize_t (signed)
- ulong (unsigned long)
- ullong (unsigned long long)

The file gci-try.rexx has been updated to support MacOs.

The demo with statvfs in gci-try.rexx has been documented to bring all the
details about the types used in the structure.
This function is a good illustration of the need of type aliases in GCI.

The structure statvfs64 depends on the bitness.
Since the rexx interpreters do not provide a portable way to test their bitness, a new function has been added to GCI:
    GciBitness
which returns 32 or 64.


================================================================================
2021 August 11

Create Github repository.
Clone of http://rexx-gci.sourceforge.net/
gci-source.1.1.zip
Author: Florian Grosse-Coosmann
