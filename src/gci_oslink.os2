/*
 *  Generic Call Interface for Rexx
 *  Copyright © 2004, Florian Groﬂe-Coosmann
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public
 *  License along with this library; if not, write to the Free
 *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * ----------------------------------------------------------------------------
 *
 * This file contains dynamic link access functions for the different systems
 * we support.
 *
 * This file should not be used if GCI becomes a true part of an interpreter,
 * because the interpreter should provide the functionality we need.
 *
 * We have to take special care that rexx.h or rexxsaa.h isn't included here,
 * These files may redefine APIENTRY and such variables which may be defined
 * by the OS include files, too. An error will be the result.
 */
#define incl_LINK_FUNCS_ONLY
#include "gci.h"

#define INCL_DOSMODULEMGR
#include <os2.h>

#include <stdio.h>
#include <string.h>

/*
 * GCI_getLibrary opens a shared library aka dynamic link library and returns
 * the associated handle. The return value is NULL in case of errors.
 * libname is the name of the desired library (not 0-terminated), libnamelen
 * is the number of characters of libname, buf is a free buffer which contains
 * at least libnamelen+32 characters.
 */
void *GCI_getLibrary( const char *libname, int libnamelen, char *buf )
{
   char LoadError[260];
   HMODULE handle;
   ULONG rc;

   memcpy( buf, libname, libnamelen );
   buf[libnamelen] = '\0';
   rc = DosLoadModule( LoadError, sizeof(LoadError), buf, &handle );
   if ( rc != 0 )
      return NULL;
   return (void *) handle;
}

/*
 * GCI_freeLibrary closes a handle obtained by GCI_getLibrary.
 */
void GCI_freeLibrary( void *handle )
{
   DosFreeModule( (HMODULE) handle );
}

/*
 * GCI_getEntryPoint gets the entry point of a function in a shared library
 * aka dynamic link library. handle is a handle obtained by GCI_getLibrary.
 * function is the name of the desired function. An ordinal entry point may be
 * given by "#ordinal".
 */
void ( *GCI_getEntryPoint( void *handle, const char *function ) )()
{
   PFN addr;
   ULONG ordinal=0ul, rc;
   unsigned u;
   char c;

   if ( ( sscanf( function, "#%u%c", &u, &c ) == 1 ) && ( u != 0 ) )
   {
      ordinal = (ULONG) u;
      function = NULL;
   }

   rc = DosQueryProcAddr( (HMODULE) handle, ordinal, function, &addr );
   if ( rc != 0 )
      return NULL;

   return (void (*)()) addr;
}
